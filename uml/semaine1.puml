 @startuml
'https://plantuml.com/sequence-diagram


'configuration du style
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold


class Game {
	+ {static} main( args:String[] )
}

class Pokemon {
    - _name : String
    - _life : Integer
    - _attack : Integer
    + <<create>> Pokemon()
    - chooseNamePokemon() : String
    - chooseAffinityPokemon() : String
    - chooseLifePokemon() : Integer
    - chooseAttackPokemon() : Integer
    + attackPokemon(pokemon : Pokemon)
    + getName() : String
    + getAffinity() : PokemonType
    + getLife() : Integer
    + getAttack() : Integer
    + setPokemonList(name : String)
}

enum PokemonType <<enum>>{
    AIR
    WATER
    EARTH
    FIRE
}
'On pourrait contenir cette énumération comme des "sous classes" de Pokemon'


abstract class Player <<abstract>> {
    + <<create>> Player()
    + {abstract} choicePokemonBattlefield()
    + displayDecks() : String
    + hasLost() : Boolean
    + addPokemonToDiscard(pokemon : Pokemon)
    + displayHand() : String
}

class User extends Player {
    + choicePokemonBattlefield()
    + displayHand() : String
}

class CPU extends Player {
    + choicePokemonBattlefield()
}

class Battlefield {
    + <<create>> Battlefield()
    + addPokemonToBattlefield(pokemon : Pokemon)
    + displayBattlefield() : String
    + chooseCurrentPokemon(pokemonName : String) : Pokemon
}

class DisplayGame {
    - _currentTurnPlayer : Integer
    + displayGame() : String
    - displayRoundUserAttacker() : String
    - displayRoundCPUAttacker() : String
}

class Draw{
    - _draw : Pokemon[]
    +<<create>> Draw(NameList : String[])
    + deletePokemonOfDraw (pokemon : Pokemon)
}

class Hand{
    - _hand : Pokemon[]
    +<<create>> Hand(NameList : String[])
    + addPokemonToHand (pokemon : Pokemon)
    + deletePokemonOfHand (pokemon : Pokemon)
}

Player *-u-> "1\n # _battlefield" Battlefield : "has a"
Player *-u-> "0..21\n # _pokemonDraw" Draw : "has a"
Player *-d---> "*\n # _pokemonDiscard" Pokemon : "is composed of"
Player *--> "0..5\n # _pokemonHand" Hand : "has a"
Battlefield *--> "0..3\n - _pokemonBattlefieldList" Pokemon : "is composed of"
DisplayGame o--> "1\n - _user" User : "display"
DisplayGame o--> "1\n - _cpu" CPU : "display"
Pokemon *-l-> "1\n - _affinity" PokemonType : "has a type of"

Game .d.> Player : <<uses>>
Game .d.> DisplayGame : <<uses>>
Game .d.> CPU : <<uses>>
Game .d.> User : <<uses>>


@enduml